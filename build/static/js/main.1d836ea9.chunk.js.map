{"version":3,"sources":["services/channels.js","reducers/channelReducer.js","hooks/useChat.jsx","components/ChatRoom.jsx","reducers/userReducer.js","components/CreateRoom.jsx","components/ChannelList.jsx","reducers/mobileReducer.js","components/Navbar.jsx","components/NotFound.jsx","App.jsx","store.js","index.jsx"],"names":["baseUrl","getAll","a","axios","get","response","data","getById","id","create","newChannel","post","updateChannelUsers","users","patch","channelReducer","state","action","type","updatedChannel","messages","changedChannel","newState","map","c","useChat","roomId","useState","setUsers","socketRef","useRef","user","useSelector","activeUser","dispatch","useDispatch","console","log","useEffect","channelService","channel","current","socketClient","query","emit","on","message","newUser","oldUsers","some","u","room","leftUser","filter","oldUser","disconnect","sendMessage","messageContent","content","author","username","date","Date","toLocaleDateString","weekday","year","month","day","hour","minute","crypto","randomBytes","toString","AlwaysScrollToBottom","elementRef","scrollIntoView","behavior","ref","Message","msg","className","ChatRoom","useParams","setMessage","channels","onSubmit","event","preventDefault","placeholder","value","onChange","target","logoutUser","window","localStorage","removeItem","userReducer","CreateRoom","newUsername","setNewUsername","roomName","setRoomName","titleClassName","inputFieldClass","buttonClass","onClick","setItem","JSON","stringify","loginUser","newChannelData","name","creator","savedChannel","ChannelList","initialChannels","Array","isArray","to","mobileReducer","navLink","navLinkMobile","MenuMobileButton","opened","mobileNavOpened","aria-controls","xmlns","width","height","fill","stroke","viewBox","d","aria-hidden","strokeLinecap","strokeLinejoin","strokeWidth","MobileNavbar","activeClassName","Navbar","NotFound","App","parsedUser","loggedInUser","getItem","parse","initializeUser","exact","path","component","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d836ea9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseUrl = '/api/channels';\r\n\r\n// Fetching all channels from server\r\nconst getAll = async () => {\r\n  const response = await axios.get(baseUrl);\r\n  return response.data;\r\n};\r\n\r\n// Fetch single channel\r\nconst getById = async (id) => {\r\n  const response = await axios.get(`${baseUrl}/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Creating a new channel\r\nconst create = async (newChannel) => {\r\n  const response = await axios.post(baseUrl, newChannel);\r\n  return response.data;\r\n};\r\n\r\n// Updating a channel\r\nconst updateChannelUsers = async (id, users) => {\r\n  const response = await axios.patch(`${baseUrl}/${id}`, users);\r\n  return response.data;\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  getById,\r\n  create,\r\n  updateChannelUsers,\r\n};\r\n","/* eslint-disable no-case-declarations */\r\nimport channelService from '../services/channels';\r\n\r\nconst channelReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n  case 'CREATE_CHANNEL':\r\n    return [action.data, ...state];\r\n  case 'UPDATE_MESSAGES':\r\n    const updatedChannel = { ...state, messages: [...state.messages, action.data] };\r\n    return updatedChannel;\r\n  case 'UPDATE_CHANNEL':\r\n    const changedChannel = action.data;\r\n    const newState = state.map((c) => (c.id === changedChannel.id ? changedChannel : c));\r\n    return newState;\r\n  case 'GET_SINGLE_CHANNEL':\r\n    return action.data;\r\n  case 'INIT_CHANNELS':\r\n    return action.data;\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const getSingleChannel = (id) => async (dispatch) => {\r\n  try {\r\n    const channel = await channelService.getById(id);\r\n    return dispatch({\r\n      type: 'GET_SINGLE_CHANNEL',\r\n      data: channel,\r\n    });\r\n  } catch (err) {\r\n    return console.log('Error fetching single channel', err);\r\n  }\r\n};\r\n\r\nexport const updateChannelMessages = (newMsg) => ({\r\n  type: 'UPDATE_MESSAGES',\r\n  data: newMsg,\r\n});\r\n\r\nexport const updateChannel = (id, users) => async (dispatch) => {\r\n  try {\r\n    const updatedChannel = await channelService.updateChannelUsers(id, users);\r\n    return dispatch({\r\n      type: 'UPDATE_CHANNEL',\r\n      data: updatedChannel,\r\n    });\r\n  } catch (err) {\r\n    return console.log('Error updating a channel', err);\r\n  }\r\n};\r\n\r\nexport const createChannel = (newChannelData) => async (dispatch) => {\r\n  try {\r\n    const savedChannel = await channelService.create(newChannelData);\r\n    return dispatch({\r\n      type: 'CREATE_CHANNEL',\r\n      data: savedChannel,\r\n    });\r\n  } catch (err) {\r\n    return console.log('Error creating a new channel', err);\r\n  }\r\n};\r\n\r\nexport const initializeChannels = () => async (dispatch) => {\r\n  try {\r\n    const initialChannels = await channelService.getAll();\r\n    dispatch({\r\n      type: 'INIT_CHANNELS',\r\n      data: initialChannels,\r\n    });\r\n  } catch (err) {\r\n    console.log('Error initializing posts', err);\r\n  }\r\n};\r\n\r\nexport default channelReducer;\r\n","import { useEffect, useState, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport socketClient from 'socket.io-client';\r\nimport crypto from 'crypto';\r\nimport { getSingleChannel, updateChannelMessages } from '../reducers/channelReducer';\r\n\r\n// Used for development\r\n// const ENDPOINT = 'http://localhost:3001';\r\n\r\nconst useChat = (roomId) => {\r\n  const [users, setUsers] = useState([]);\r\n  const socketRef = useRef();\r\n  const user = useSelector((state) => state.activeUser);\r\n  const dispatch = useDispatch();\r\n  console.log('in hook users', users);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      console.log('useHook no user found');\r\n      return null;\r\n    }\r\n\r\n    // Fetch messages from database on load\r\n    dispatch(getSingleChannel(roomId));\r\n    // Create new socket connection\r\n    socketRef.current = socketClient({\r\n      query: { roomId, user },\r\n    });\r\n    console.log('in use hook');\r\n    console.log('emit', user);\r\n    socketRef.current.emit('userJoinRoom', user);\r\n\r\n    // Listen for incoming messages\r\n    socketRef.current.on('newChatMessage', (message) => {\r\n      console.log('GETTING NEW MESSAGE', message);\r\n      dispatch(updateChannelMessages(message));\r\n    });\r\n\r\n    // On joining room users in room array adjusted\r\n    socketRef.current.on('userJoinRoom', (newUser) => {\r\n      console.log('joining room is usehook');\r\n      setUsers((oldUsers) => {\r\n        if (oldUsers.some((u) => u.id === newUser.id)) {\r\n          return [...oldUsers];\r\n        }\r\n        return [...oldUsers, newUser];\r\n      });\r\n    });\r\n\r\n    // On user list changes in backend\r\n    socketRef.current.on('roomListChange', (room) => {\r\n      console.log('room list change happened');\r\n      setUsers(() => {\r\n        console.log(room);\r\n        return room.users;\r\n      });\r\n    });\r\n\r\n    // On leaving room users array adjusted accordingly\r\n    socketRef.current.on('userLeaveRoom', (leftUser) => {\r\n      setUsers((oldUsers) => {\r\n        console.log('Old USERS', oldUsers);\r\n        console.log('LEFT USER', leftUser);\r\n        const newUsers = oldUsers.filter((oldUser) => oldUser.id !== leftUser.id);\r\n        return newUsers;\r\n      });\r\n    });\r\n\r\n    // Destroy socket ref when connection is closed\r\n    return () => socketRef.current.disconnect();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [roomId, user]);\r\n\r\n  // Send a message to the server\r\n  // that forwards it to all users in a room\r\n  const sendMessage = (messageContent) => {\r\n    const options = {\r\n      weekday: 'short', year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit',\r\n    };\r\n    socketRef.current.emit('newChatMessageToServer', {\r\n      content: messageContent,\r\n      author: { username: user.username, id: user.id },\r\n      date: new Date().toLocaleDateString('ru-RU', options),\r\n      id: crypto.randomBytes(12).toString('hex'),\r\n    });\r\n  };\r\n\r\n  return {\r\n    sendMessage,\r\n    users,\r\n    socketRef,\r\n  };\r\n};\r\n\r\nexport default useChat;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport useChat from '../hooks/useChat';\r\n\r\n// Small element ref at the bottom of chat, so it automatically scrolls to bottom\r\n// when new messages arrive\r\nconst AlwaysScrollToBottom = () => {\r\n  const elementRef = useRef();\r\n  useEffect(() => elementRef.current.scrollIntoView({ behavior: 'smooth' }));\r\n  return <div ref={elementRef} />;\r\n};\r\n\r\nconst Message = ({ user, msg }) => {\r\n  // Tailwindcss styles\r\n  const msgOwn = 'bg-green-200 mx-3 mb-3 p-1 rounded w-52 self-end';\r\n  const msgForeign = 'bg-blue-200 ml-3 mb-3 p-1 rounded w-52 self-start';\r\n  const flexOwn = 'flex flex-row-reverse items-baseline space-x-1';\r\n  const flexForeign = 'flex flex-row items-baseline space-x-1';\r\n\r\n  // Style depends on message's ownership\r\n  // if current user is creator of message => it shows on the right side and with green bg\r\n  // if message is not user's => it's on the left and of color blue\r\n  return (\r\n    <div className={user.id === msg.author.id ? flexOwn : flexForeign}>\r\n      <span className={\r\n        user.id.toString() === msg.author.id.toString() ? msgOwn : msgForeign\r\n      }\r\n      >\r\n        {msg.content}\r\n      </span>\r\n      <span className=\"text-gray-300 text-sm self-start\">\r\n        {msg.date}\r\n      </span>\r\n      { user.id !== msg.author.id\r\n        ? (\r\n          <>\r\n            <br />\r\n            <span className=\"text-gray-500 self-start px-2\">{msg.author.username}</span>\r\n          </>\r\n        ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ChatRoom = () => {\r\n  const { roomId } = useParams();\r\n  // Getting socket, userlist and message sending function from custom hook\r\n  const {\r\n    sendMessage,\r\n    users,\r\n  } = useChat(roomId);\r\n  // Controlling the form\r\n  const [message, setMessage] = useState('');\r\n  // Getting state from redux store\r\n  const user = useSelector((state) => state.activeUser);\r\n  const messages = useSelector((state) => state.channels.messages);\r\n  // Tailwindcss styles\r\n  const inputFieldClass = 'w-5/6 rounded-bl shadow-sm border-r-0 border-t-0 border-gray-400 hover:bg-gray-100 hover:border-gray-500';\r\n  const buttonClass = 'w-1/6 focus:ring-2 shadow-sm px-3 py-2 border border-t-0 border-gray-400 hover:border-gray-500 rounded-br font-semibold focus:outline-none hover:bg-green-200 focus:bg-green-300';\r\n\r\n  const handleMessageSend = (event) => {\r\n    event.preventDefault();\r\n    sendMessage(message);\r\n    setMessage('');\r\n  };\r\n\r\n  if (!user) {\r\n    console.log('no user');\r\n    return (\r\n      <div className=\"text-center\">\r\n        <h1 className=\"font-bold text-xl mt-3\">Please login to see chat!</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"md:grid md:grid-cols-5\">\r\n      <div className=\"mx-3 md:col-start-2 md:col-span-3 shadow-sm border rounded px-5 py-3 mt-5 text-center\">\r\n        <h1 className=\"font-bold text-xl mb-2\">\r\n          Room:\r\n          {' '}\r\n          #\r\n          {roomId}\r\n        </h1>\r\n        <div className=\"md:grid md:grid-cols-4\">\r\n          <div className=\"col-span-1 pt-2 col-start-1 bg-blue-100 rounded-t md:rounded-tr-none border border-gray-400\">\r\n            <h2 className=\"font-semibold\">\r\n              Users in room:\r\n            </h2>\r\n            <ul>\r\n              {users.map((u) => <li key={u.id}>{u.username}</li>)}\r\n            </ul>\r\n          </div>\r\n          <div className=\"col-span-3 col-start-2 border border-gray-400 md:rounded-tr pt-2 md:border-l-0\">\r\n            <h2 className=\"font-semibold text-lg\">\r\n              Chat\r\n            </h2>\r\n            <div className=\"h-80 overflow-auto\">\r\n              <ul className=\"flex flex-col items-baseline\">\r\n                {\r\n                  messages\r\n                    ? (\r\n                      <>\r\n                        {messages.map((msg) => (\r\n                          <li\r\n                            key={msg.id}\r\n                            className={user.id === msg.author.id ? 'self-end items-baseline' : 'self-start items-baseline'}\r\n                          >\r\n                            <Message user={user} msg={msg} />\r\n                          </li>\r\n                        ))}\r\n                      </>\r\n                    )\r\n                    : ('No messages yet..')\r\n                }\r\n                <AlwaysScrollToBottom />\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <form className=\"md:col-span-4\" onSubmit={handleMessageSend}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Send a message...\"\r\n              value={message}\r\n              onChange={({ target }) => setMessage(target.value)}\r\n              className={inputFieldClass}\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className={buttonClass}\r\n            >\r\n              Send\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMessage.propTypes = {\r\n  user: PropTypes.shape({\r\n    username: PropTypes.string,\r\n    id: PropTypes.string,\r\n  }).isRequired,\r\n  msg: PropTypes.shape({\r\n    author: PropTypes.shape({\r\n      username: PropTypes.string,\r\n      id: PropTypes.string,\r\n    }),\r\n    content: PropTypes.string.isRequired,\r\n    date: PropTypes.string.isRequired,\r\n    id: PropTypes.string,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ChatRoom;\r\n","import crypto from 'crypto';\r\n\r\nconst userReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n  case 'INIT_USER':\r\n    return action.data.user;\r\n  case 'LOGIN_USER':\r\n    return action.data.user;\r\n  case 'REMOVE_USER':\r\n    return null;\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const loginUser = (username) => {\r\n  const id = crypto.randomBytes(12).toString('hex');\r\n  const user = { username, id };\r\n  window.localStorage.setItem('chatAppUser', JSON.stringify(user));\r\n  return {\r\n    type: 'LOGIN_USER',\r\n    data: {\r\n      user,\r\n    },\r\n  };\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  window.localStorage.removeItem('chatAppUser');\r\n  console.log('logged out');\r\n  return {\r\n    type: 'REMOVE_USER',\r\n  };\r\n};\r\n\r\nexport const initializeUser = () => {\r\n  const loggedInUser = window.localStorage.getItem('chatAppUser');\r\n  console.log('to parse:', loggedInUser);\r\n  let parsedUser;\r\n  if (loggedInUser) {\r\n    parsedUser = JSON.parse(loggedInUser);\r\n    console.log('Found logged in user:', parsedUser);\r\n  }\r\n  return {\r\n    type: 'INIT_USER',\r\n    data: {\r\n      user: parsedUser || null,\r\n    },\r\n  };\r\n};\r\n\r\nexport default userReducer;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginUser, logoutUser } from '../reducers/userReducer';\r\nimport { createChannel } from '../reducers/channelReducer';\r\n\r\nconst CreateRoom = () => {\r\n  const [newUsername, setNewUsername] = useState('');\r\n  const [roomName, setRoomName] = useState('');\r\n  const titleClassName = 'font-bold text-xl mb-2';\r\n  const inputFieldClass = 'rounded-l shadow-sm border-r-0 border-gray-400 hover:bg-gray-100 hover:border-gray-500';\r\n  const buttonClass = 'focus:ring-2 shadow-sm px-3 py-2 border border-gray-400 hover:border-gray-500 rounded-r font-semibold focus:outline-none hover:bg-gray-200 focus:bg-gray-300';\r\n  const dispatch = useDispatch();\r\n  const user = useSelector((state) => state.activeUser);\r\n\r\n  // Creating a new channel and saving to DB\r\n  const handleChannelCreation = (event) => {\r\n    event.preventDefault();\r\n    dispatch(createChannel({ name: roomName, creator: user.username }));\r\n    setRoomName('');\r\n  };\r\n\r\n  // Saving a user in a localStorage for use with messages\r\n  const handleUserCreation = (event) => {\r\n    event.preventDefault();\r\n    dispatch(loginUser(newUsername));\r\n    setNewUsername('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"md:grid md:grid-cols-5\">\r\n      <div className=\"mx-3 md:col-start-2 md:col-span-3 rounded shadow-sm border px-5 py-3 mt-5 text-center\">\r\n        {\r\n          user\r\n            ? (\r\n              <div>\r\n                Hello,\r\n                {' '}\r\n                {user.username}\r\n                !\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => dispatch(logoutUser())}\r\n                  className=\"px-2 py-1 mx-2 border hover:bg-gray-200 focus:outline-none focus:ring-2 border-gray-400 hover:border-gray-500 rounded shadow-sm font-semibold\"\r\n                >\r\n                  Logout\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <h1 className={titleClassName}>\r\n                  Enter your name\r\n                </h1>\r\n                <form onSubmit={handleUserCreation}>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your name...\"\r\n                    value={newUsername}\r\n                    onChange={({ target }) => setNewUsername(target.value)}\r\n                    className={inputFieldClass}\r\n                  />\r\n                  <button\r\n                    type=\"submit\"\r\n                    className={buttonClass}\r\n                  >\r\n                    Set\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            )\r\n        }\r\n        <h2 className={titleClassName}>Create a new room or join existing</h2>\r\n        {\r\n          user\r\n            ? (\r\n              <form onSubmit={handleChannelCreation}>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Enter room name\"\r\n                  value={roomName}\r\n                  onChange={({ target }) => setRoomName(target.value)}\r\n                  className={inputFieldClass}\r\n                />\r\n                <button\r\n                  type=\"submit\"\r\n                  className={buttonClass}\r\n                >\r\n                  Create\r\n                </button>\r\n              </form>\r\n            ) : (\r\n              'Login to create and join rooms!'\r\n            )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRoom;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { initializeChannels } from '../reducers/channelReducer';\r\n\r\nconst ChannelList = () => {\r\n  const channels = useSelector((state) => state.channels);\r\n  const dispatch = useDispatch();\r\n\r\n  // On page load getting list of channels from server\r\n  useEffect(() => {\r\n    dispatch(initializeChannels());\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // Redux state can be array of channels or a single channel and here we need a single channel\r\n  if (!Array.isArray(channels)) {\r\n    return ('loading...');\r\n  }\r\n\r\n  return (\r\n    <div className=\"md:grid md:grid-cols-5\">\r\n      <div className=\"mx-3 md:col-start-2 md:col-span-3 shadow-sm border rounded px-5 py-3 mt-5 text-center\">\r\n        <h2 className=\"font-bold text-xl mb-2\">\r\n          List of channels available\r\n        </h2>\r\n        {\r\n          channels\r\n            ? (\r\n              <ul>\r\n                {channels.map((c) => (\r\n                  <Link key={c.id} to={`/channels/${c.id}`}>\r\n                    <li className=\"border-gray-400 hover:border-gray-600 font-semibold border-2 rounded shadow-sm p-5 mb-3 bg-gray-50 hover:bg-gray-200\">\r\n                      {c.name}\r\n                    </li>\r\n                  </Link>\r\n                ))}\r\n              </ul>\r\n            ) : (\r\n              'Loading...'\r\n            )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChannelList;\r\n","const mobileReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n  case 'SET_OPENED':\r\n    return true;\r\n  case 'SET_CLOSED':\r\n    return false;\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const openMobileNavbar = () => ({\r\n  type: 'SET_OPENED',\r\n});\r\n\r\nexport const closeMobileNavbar = () => ({\r\n  type: 'SET_CLOSED',\r\n});\r\n\r\nexport default mobileReducer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { logoutUser } from '../reducers/userReducer';\r\nimport { openMobileNavbar, closeMobileNavbar } from '../reducers/mobileReducer';\r\n\r\nconst navLink = 'text-white px-2 hover:text-yellow-100 text-m';\r\nconst navLinkMobile = 'text-white hover:text-yellow-600 min-w-full hover:bg-gray-100 hover:opacity-50 block px-3 py-2 rounded-md text-base font-medium';\r\n\r\nconst MenuMobileButton = () => {\r\n  const dispatch = useDispatch();\r\n  const opened = useSelector((state) => state.mobileNavOpened);\r\n  console.log('OPEND:', opened);\r\n  const handleOpened = () => {\r\n    if (opened) {\r\n      return dispatch(closeMobileNavbar());\r\n    }\r\n    return dispatch(openMobileNavbar());\r\n  };\r\n\r\n  return (\r\n    <div className=\"-mr-2 flex justify-end items-end md:hidden\">\r\n      {/* <!-- Mobile menu button --> */}\r\n      <button\r\n        type=\"button\"\r\n        className=\"bg-green-300 mb-2 inline-flex items-end justify-end p-2 rounded-md text-gray-400 hover:text-white hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\"\r\n        aria-controls=\"mobile-menu\"\r\n        onClick={handleOpened}\r\n      >\r\n        {\r\n          opened\r\n            ? (\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" stroke=\"currentColor\" className=\"block h-6 w-6\" viewBox=\"0 0 16 16\">\r\n                <path d=\"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\" />\r\n                <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\" />\r\n              </svg>\r\n            ) : (\r\n              <svg className=\"block h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\r\n              </svg>\r\n            )\r\n        }\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MobileNavbar = () => {\r\n  const user = useSelector((state) => state.activeUser);\r\n  const dispatch = useDispatch();\r\n  const opened = useSelector((state) => state.mobileNavOpened);\r\n\r\n  return (\r\n    <div className=\"px-5\">\r\n      <MenuMobileButton />\r\n      <div className=\"flex flex-wrap text-center mx-auto justify-items-center space-y-1\">\r\n        {\r\n          opened\r\n            ? (\r\n              <>\r\n                <NavLink to=\"/new-channel\" activeClassName=\"font-bold\" className={navLinkMobile}>New channel</NavLink>\r\n                {/* Conditionally rendering the link to login */}\r\n                {\r\n                  user\r\n                    ? (\r\n                      <>\r\n                        <NavLink to=\"/channels/all\" activeClassName=\"font-bold\" className={navLinkMobile}>All channels</NavLink>\r\n                        <div className=\"flex justify-items-end items-end\">\r\n                          <button\r\n                            type=\"button\"\r\n                            onClick={() => dispatch(logoutUser())}\r\n                            className=\" text-right px-3 inline-flex self-end justify-end py-1 shadow-sm text-sm font-medium rounded-md text-white bg-orange-400 hover:bg-orange-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n                          >\r\n                            Logout\r\n                          </button>\r\n                        </div>\r\n                      </>\r\n                    )\r\n                    : (\r\n                      <NavLink to=\"/new-channel\" activeClassName=\"font-bold\" className={navLinkMobile}>Login</NavLink>\r\n                    )\r\n                }\r\n\r\n              </>\r\n            )\r\n            : ('')\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Navbar = () => {\r\n  const user = useSelector((state) => state.activeUser);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"bg-blue-500 py-4\">\r\n      <div className=\"flex justify-end space-x-4\">\r\n        <div className=\"hidden md:block px-10\">\r\n          <NavLink to=\"/new-channel\" activeClassName=\"font-bold\" className={navLink}>New channel</NavLink>\r\n          {/* Conditionally rendering the link to login */}\r\n          {\r\n            user\r\n              ? (\r\n                <>\r\n                  <NavLink to=\"/channels/all\" activeClassName=\"font-bold\" className={navLink}>All channels</NavLink>\r\n                  <span className=\"text-white mr-2\">\r\n                    Hello,\r\n                    {' '}\r\n                    {user.username}\r\n                    !\r\n                  </span>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => dispatch(logoutUser())}\r\n                    className=\"px-3 py-1 mx-2 shadow-sm text-sm font-medium rounded-md text-white bg-orange-400 hover:bg-orange-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n                  >\r\n                    Logout\r\n                  </button>\r\n                </>\r\n              )\r\n              : <NavLink to=\"/new-channel\" activeClassName=\"font-bold\" className=\"px-3 py-1 mx-2 shadow-sm text-sm font-medium rounded-md text-white bg-green-500 hover:bg-green-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\">Login</NavLink>\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className=\"md:hidden ml-0\">\r\n        <MobileNavbar />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => (\r\n  <div>\r\n    <h1>Error 404. Page not found!</h1>\r\n  </div>\r\n);\r\n\r\nexport default NotFound;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport ChatRoom from './components/ChatRoom';\r\nimport CreateRoom from './components/CreateRoom';\r\nimport ChannelList from './components/ChannelList';\r\nimport Navbar from './components/Navbar';\r\nimport NotFound from './components/NotFound';\r\nimport { initializeUser } from './reducers/userReducer';\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // Getting the logged in user\r\n  useEffect(() => {\r\n    dispatch(initializeUser());\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <Switch>\r\n        <Route exact path=\"/channels/all\" component={ChannelList} />\r\n        <Route path=\"/channels/:roomId\">\r\n          <ChatRoom />\r\n        </Route>\r\n        <Route exact path=\"/new-channel\" component={CreateRoom} />\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/new-channel\" />\r\n        </Route>\r\n        <Route path=\"*\" component={NotFound} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport userReducer from './reducers/userReducer';\r\nimport channelReducer from './reducers/channelReducer';\r\nimport mobileReducer from './reducers/mobileReducer';\r\n\r\nconst reducer = combineReducers({\r\n  activeUser: userReducer,\r\n  channels: channelReducer,\r\n  mobileNavOpened: mobileReducer,\r\n});\r\n\r\nconst store = createStore(reducer,\r\n  composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}